{
  "swagger": "2.0",
  "info": {
    "description": "The api service for DevBlog \n \n ******Members ******\n Elizabeth \n Ariel \n Alexis \n Owamamwen",
    "version": "1.0.0",
    "title": "Jasnah TeamWork",
    "contact": {
      "email": "studentteamwork@byui.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "byui-cse-341-groupjasnah.onrender.com",
  "basePath": "/",
  "tags": [
    {
      "name": "login-credentials",
      "description": "These API endpoints are designed for Login user account"
    },
    {
      "name": "register-user",
      "description": "Operations about user"
    },
    {
      "name": "user-post",
      "description": "Operations about user post contents"
    },
    {
      "name": "blog-category",
      "description": "Operations about post category"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["login-credentials"],
        "summary": "Login user",
        "description": "This is for when a user creates an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created user",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Web development"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["register-user"],
        "summary": "Create user",
        "description": "This is for when a user creates an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/register-user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created user",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Web development"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["register-user"],
        "summary": "Get user by user id",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/register-user"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["register-user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/register-user"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified user"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["register-user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delete-user"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted user"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": ["user-post"],
        "summary": "Get all post",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "Array",
              "$ref": "#/definitions/user-post"
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "post": {
        "tags": ["user-post"],
        "summary": "Create new post",
        "description": "This is for when a user creates an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user-post"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created new post",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Web development"
                }
              }
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": ["user-post"],
        "summary": "Get post by id",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/user-post"
            }
          },
          "400": {
            "description": "Invalid post id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user-post"],
        "summary": "Updated user post",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user-post"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified user"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user-post"],
        "summary": "Delete user post",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delete-user-post"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted user"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["blog-category"],
        "summary": "Get all blog category",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "Array",
              "$ref": "#/definitions/blog-category"
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "post": {
        "tags": ["blog-category"],
        "summary": "Create new category",
        "description": "This is for when a user create category.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created new blog categry",
            "required": true,
            "schema": {
              "$ref": "#/definitions/blog-category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created new post",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Web development"
                }
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    }
  },
  "definitions": {
    "login": {
      "type": "object",
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "register-user": {
      "type": "object",
      "required": ["username", "email", "password"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "delete-user": {
      "type": "object",
      "required": ["username"],
      "properties": {
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "user-post": {
      "type": "object",
      "required": ["username", "title", "desc"],
      "properties": {
        "username": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        }
      }
    },
    "delete-user-post": {
      "type": "object",
      "required": ["username"],
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "blog-category": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    }
  }
}
